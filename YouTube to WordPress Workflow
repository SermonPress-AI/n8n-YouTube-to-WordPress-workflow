{
  "nodes": [
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "GPT-3.5-TURBO"
        },
        "messages": {
          "values": [
            {
              "content": "You are a helpful assistant tasked with formatting sermon transcripts into clean, readable paragraphs. Your job is to improve readability without altering the content. \n\nDo not summarize, omit, rephrase, or add anything. Only format the text into coherent paragraphs. Keep the speaker’s tone and voice intact.\n\nUse proper punctuation and spacing. Avoid long walls of text. Use multiple paragraphs where natural.\n",
              "role": "system"
            },
            {
              "content": "=Format the following transcript into readable paragraphs. Do not remove or change any words. Just insert paragraph breaks where they naturally belong:\n\n{{ $json.chunk }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1152,
        -368
      ],
      "id": "8389f332-7f37-466e-a1fb-9b8731aa7f6b",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "uHhM3GMtCxg9mo7L",
          "name": "5MT n8n Sermon Publishing Workflow OpenAI Key"
        }
      }
    },
    {
      "parameters": {
        "content": "## Wordpress flow\n",
        "height": 560,
        "width": 400,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1808,
        -544
      ],
      "typeVersion": 1,
      "id": "62c13f22-29cf-42ca-a6cc-11bbdb3f5bac",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "📝 **Supadata API**\n\nCalls the Supadata API to get the transcript for each video.\n\n**How to change:** Update the API URL or key if the service changes. Modify request headers or parameters for other APIs.",
        "height": 400,
        "width": 260,
        "color": 7
      },
      "id": "711858cd-4e14-4c43-8ee4-5d15ea78990c",
      "name": "supadata Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        544,
        -576
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "title": "={{ $('Get YouTube Metadata from video ID').item.json.snippet.title }}",
        "additionalFields": {
          "content": "={{ $('Get YouTube Metadata from video ID').item.json.player.embedHtml }}\n\n{{ $json.combinedTranscript }}",
          "status": "draft"
        }
      },
      "type": "n8n-nodes-base.wordpress",
      "typeVersion": 1,
      "position": [
        2048,
        -176
      ],
      "id": "092af208-1be1-4b7b-aa18-6293830b98a0",
      "name": "Wordpress",
      "credentials": {
        "wordpressApi": {
          "id": "lFYyN14RBwz0R8uh",
          "name": "Joaquin's Wordpress account"
        }
      }
    },
    {
      "parameters": {
        "content": "## YouTube Metadata flow\n",
        "height": 560,
        "width": 780,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -320,
        -544
      ],
      "typeVersion": 1,
      "id": "42efeb81-d591-4acd-aedb-38f3c450c832",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Transcription flow\n",
        "height": 560,
        "width": 1220,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        528,
        -720
      ],
      "typeVersion": 1,
      "id": "ff23f312-401e-4874-ab50-68584661dfc4",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "url": "=https://api.supadata.ai/v1/transcript?url=https://youtu.be/{{ $json.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "[SUPADATA_API_KEY]"
            }
          ]
        },
        "options": {}
      },
      "id": "ca141769-4043-493f-ae17-0938f28ab314",
      "name": "Get transcription from Supadata API",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        624,
        -368
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "youtube-to-wp",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -224,
        -176
      ],
      "id": "13071495-def1-4a0a-987d-84bb45954240",
      "name": "Retrieve URL via POST request",
      "webhookId": "493ec790-6eeb-40fa-8a23-5bee203f2626"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json.body.url;\nconst regex = /(?:v=|\\/)([0-9A-Za-z_-]{11})(?:&|$)/;\nconst match = input.match(regex);\n\nif (!match || !match[1]) {\n  throw new Error(\"Invalid YouTube link. Couldn't extract video ID.\");\n}\n\nreturn [{ videoId: match[1] }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        -176
      ],
      "id": "4f5749bb-8382-443e-9503-37b1cebc8e33",
      "name": "Extract video ID from URL"
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "get",
        "videoId": "={{ $json.videoId }}",
        "options": {}
      },
      "id": "ce52cc8e-bad5-4639-8cc4-cbca602bb711",
      "name": "Get YouTube Metadata from video ID",
      "type": "n8n-nodes-base.youTube",
      "position": [
        272,
        -176
      ],
      "typeVersion": 1,
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "lSggnTPzpXWI1eoA",
          "name": "YouTube account 3"
        }
      }
    },
    {
      "parameters": {
        "content": "🎥 **YouTube API** \n\nCalls the YouTube API to get video metadata.\n\n**How to change:** Update the credentials to the desired YouTube account.",
        "height": 400,
        "width": 260,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        192,
        -400
      ],
      "typeVersion": 1,
      "id": "00144c3e-c43d-4c03-ad9a-b92ffd3de8f4",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "🖥️ **GPT-3.5 Turbo**\n\nSends transcript to GPT-3.5 Turbo for formatting.\n\n**How to change:** Update the credentials to the desired OpenAI account.",
        "height": 400,
        "width": 260,
        "color": 7
      },
      "id": "a7d93e9a-85f5-4efd-b696-bc308f787501",
      "name": "scirpt Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1152,
        -576
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "🚩 **POST Endpoint** \n\nWaits for a post request to begin service.\n\n**Format:** \n{\n    \"url\": \"[ENTER_YOUTUBE_URL]\"\n}",
        "height": 400,
        "width": 260,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -304,
        -400
      ],
      "typeVersion": 1,
      "id": "580774ec-299b-44ad-8048-ac08880457bd",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "jsCode": "const content = $input.first().json.content;\n\n// Combine all the segments into one big text blob\nlet fullText = content.map(item => item.text).join(' ');\n\n// Rough sentence tokenizer\nconst sentences = fullText.match(/[^\\.!\\?]+[\\.!\\?]+/g) || [];\n\nconst chunks = [];\nlet currentChunk = '';\nlet tokenEstimate = 0;\n\nfor (const sentence of sentences) {\n  const sentenceTokenEstimate = Math.ceil(sentence.split(' ').length * 1.3);\n  if (tokenEstimate + sentenceTokenEstimate > 3000) {\n    chunks.push(currentChunk.trim());\n    currentChunk = sentence + ' ';\n    tokenEstimate = sentenceTokenEstimate;\n  } else {\n    currentChunk += sentence + ' ';\n    tokenEstimate += sentenceTokenEstimate;\n  }\n}\nif (currentChunk.trim()) {\n  chunks.push(currentChunk.trim());\n}\n\nreturn chunks.map(chunk => ({ chunk }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        912,
        -368
      ],
      "id": "120319a6-e254-4f0d-9968-71f1c72ba327",
      "name": "Break transcript into chunks"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nlet combinedTranscript = '';\nfor (const item of $input.all()) {\n  combinedTranscript += item.json.message.content;\n  combinedTranscript += '\\n \\n'\n}\n\nreturn [{ json: { combinedTranscript: combinedTranscript } }]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1568,
        -368
      ],
      "id": "68f7a6c8-8aa1-40f0-9c7e-5a04ade4d53d",
      "name": "Combine formatted chunks into one transcript"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1840,
        -176
      ],
      "id": "d468c6d5-7e99-4c40-9a8a-48be9e5103d8",
      "name": "Merge YT and transcript outputs"
    }
  ],
  "connections": {
    "OpenAI": {
      "main": [
        [
          {
            "node": "Combine formatted chunks into one transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wordpress": {
      "main": [
        []
      ]
    },
    "Get transcription from Supadata API": {
      "main": [
        [
          {
            "node": "Break transcript into chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve URL via POST request": {
      "main": [
        [
          {
            "node": "Extract video ID from URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract video ID from URL": {
      "main": [
        [
          {
            "node": "Get YouTube Metadata from video ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get YouTube Metadata from video ID": {
      "main": [
        [
          {
            "node": "Get transcription from Supadata API",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge YT and transcript outputs",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Break transcript into chunks": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine formatted chunks into one transcript": {
      "main": [
        [
          {
            "node": "Merge YT and transcript outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge YT and transcript outputs": {
      "main": [
        [
          {
            "node": "Wordpress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f318f1eeb582bef69a56797ad1f28184a54cfe51b0e461ee190c5740946ea07e"
  }
}
